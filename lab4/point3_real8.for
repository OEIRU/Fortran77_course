      PROGRAM INTEGRATION
      REAL*8 A, B, ANALYTIC_VAL, CURRENT_INTEGRAL
      REAL*8 PREV_INTEGRAL, RUNGE_ERROR, RICHARDSON_CORRECTION
      REAL*8 ERROR, PREV_ERROR, RUNGE_RATIO, CORRECTED_ERROR, H
      INTEGER MAX_STEPS, N, NUM_SEGMENTS, METHOD
      EXTERNAL F
      REAL*8 ANALYTIC_VALUE
      REAL*8 TRAPEZOIDAL_METHOD
      REAL*8 GAUSS_QUADRATURE_METHOD

      PRINT *, 'Choose integration method: 1 for Trapez, 2 for Gauss'
      READ *, METHOD
      A = 0.0D0
      B = 10.0D0
      MAX_STEPS = 25
      ANALYTIC_VAL = ANALYTIC_VALUE(A, B)
      PRINT *, 'Number of segments Numerical value'
      PRINT *, 'Error ratio Error'
      PRINT *, 'Runge estimate Richardson correction'
      PRINT *, 'Error of corrected solution'

      PREV_INTEGRAL = 0.0D0
      PREV_ERROR = 0.0D0

      DO N = 0, MAX_STEPS
         NUM_SEGMENTS = 2**N
         CALL CREATE_GRID(A, B, NUM_SEGMENTS, H)

         IF (METHOD .EQ. 1) THEN
        CURRENT_INTEGRAL = TRAPEZOIDAL_METHOD(F, A, B, NUM_SEGMENTS, H)
         ELSE IF (METHOD .EQ. 2) THEN
      CURRENT_INTEGRAL = GAUSS_QUADRATURE_METHOD(F, A, B, NUM_SEGMENTS)
         ELSE
        PRINT *, 'Invalid method selected. Using Trapezoidal method.'
        CURRENT_INTEGRAL = TRAPEZOIDAL_METHOD(F, A, B, NUM_SEGMENTS, H)
         END IF

         ERROR = ABS(ANALYTIC_VAL - CURRENT_INTEGRAL)
         IF (N .GT. 0) THEN
            RUNGE_RATIO = ERROR / PREV_ERROR
            IF (METHOD .EQ. 1) THEN
          RUNGE_ERROR = ABS(CURRENT_INTEGRAL - PREV_INTEGRAL) / 3.0D0
          ELSE IF (METHOD .EQ. 2) THEN
          RUNGE_ERROR = ABS(CURRENT_INTEGRAL - PREV_INTEGRAL) / 255.0D0
            END IF
            RICHARDSON_CORRECTION = CURRENT_INTEGRAL + RUNGE_ERROR
         ELSE
            RUNGE_RATIO = 0.0D0
            RUNGE_ERROR = 0.0D0
            RICHARDSON_CORRECTION = CURRENT_INTEGRAL
         END IF

         CORRECTED_ERROR = ABS(RICHARDSON_CORRECTION - ANALYTIC_VAL)

    1 FORMAT(I10, E15.8, E15.8, E15.8, E15.8, E15.8, E15.8)
         PRINT 1, NUM_SEGMENTS, CURRENT_INTEGRAL,
     &        ERROR, RUNGE_ERROR,
     &        RICHARDSON_CORRECTION, CORRECTED_ERROR

         PREV_INTEGRAL = CURRENT_INTEGRAL
         PREV_ERROR = ERROR

         PREV_INTEGRAL = CURRENT_INTEGRAL
         PREV_ERROR = ERROR
      END DO

 1000 CONTINUE
      END

      REAL*8 FUNCTION F(X)
      REAL*8 X
      F = X**5
      END

      REAL*8 FUNCTION ANALYTIC_VALUE(A, B)
      REAL*8 A, B
      ANALYTIC_VALUE = (B**6 - A**6) / 6.0D0
      END

      SUBROUTINE CREATE_GRID(A, B, N, H)
      REAL*8 A, B, H
      INTEGER N
      H = (B - A) / DBLE(N)
      END

      REAL*8 FUNCTION TRAPEZOIDAL_METHOD(FUNC, A, B, N, H)
      REAL*8 FUNC, A, B, H, RESULT, X
      INTEGER N, I
      EXTERNAL FUNC
      RESULT = 0.5D0 * (FUNC(A) + FUNC(B))
      DO I = 1, N-1
         X = A + DBLE(I) * H
         RESULT = RESULT + FUNC(X)
      END DO
      TRAPEZOIDAL_METHOD = RESULT * H
      END

      REAL*8 FUNCTION GAUSS_QUADRATURE_METHOD(FUNC, A, B, N)
      REAL*8 FUNC, A, B, H, SUM
      INTEGER N, I
      EXTERNAL FUNC
      REAL*8 X(4), W(4)
      REAL*8 GAUSS_SUM
      DATA X /-0.8611363116D0, -0.3399810436D0,
     &  0.3399810436D0, 0.8611363116D0/
      DATA W /0.3478547486D0, 0.6521451549D0,
     &  0.6521451549D0, 0.3478547486D0/

      H = (B - A) / DBLE(N)
      SUM = 0.0D0
      DO I = 1, N
      SUM = SUM + GAUSS_SUM(FUNC, A + 
     & (DBLE(I)-1.0D0)*H, A + DBLE(I)*H, X, W)
      END DO
      GAUSS_QUADRATURE_METHOD = SUM
      END

      REAL*8 FUNCTION GAUSS_SUM(FUNC, A, B, X, W)
      REAL*8 FUNC, A, B
      REAL*8 X(4), W(4)
      INTEGER I
      EXTERNAL FUNC
      REAL*8 VALUE, XI, HALF_WIDTH, MID_POINT
      HALF_WIDTH = (B - A) / 2.0D0
      MID_POINT = (A + B) / 2.0D0
      VALUE = 0.0D0
      DO I = 1, 4
         XI = HALF_WIDTH * X(I) + MID_POINT
         VALUE = VALUE + W(I) * FUNC(XI)
      END DO
      GAUSS_SUM = HALF_WIDTH * VALUE
      END
